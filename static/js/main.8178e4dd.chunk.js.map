{"version":3,"sources":["blocks/Calendar/colors.ts","blocks/Calendar/date.ts","blocks/Calendar/index.ts","blocks/Calendar/Day/Day.tsx","blocks/Calendar/DaysOfWeek/DaysOfWeek.tsx","blocks/Calendar/Legend/Legend.tsx","blocks/Calendar/Calendar.tsx","App.tsx","../events.js","serviceWorker.ts","index.tsx"],"names":["colors","iterateByDay","getDayOfWeekIndex","date","getDay","startDate","endDate","dateIterator","Date","setDate","getDate","getDayId","month","getMonth","day","getFullYear","join","eventTypes","CRIMEA_WEEKEND","WEEKEND","BUSINESS_TRIP","VACATION","CONCERT","SUBBOTNIK","HIKE","TRAINING","FRIDAY","HACKATHON","CALIBRATION","CONFERENCE","UNKNOWN","getEventType","origEvent","text","summary","description","toLowerCase","Object","values","type","includes","getColor","eventTypesVals","indexOf","humanDateToJs","humanDate","defaultYear","split","year","cnCalendar","cn","getBackground","events","length","color","reduce","acc","event","idx","push","Day","isCurrent","isWeekend","isPassed","className","currentDate","hasEvents","current","otherMonth","meta","weekend","passed","tabIndex","style","background","undefined","map","location","url","filter","Boolean","val","weekDays","locale","toLocaleDateStringOpts","weekday","i","toLocaleDateString","getWeekDays","DaysOfWeek","dayOfWeek","Legend","filteredData","data","colorLegend","today","setHours","isTodayMarked","keys","eventStartStr","start","eventEndStr","end","shouldMarkToday","markToday","toString","Calendar","props","eventsDescription","normalizedEvents","interval","eventsData","trim","parsedEvent","sort","a","b","intervalIterator","dayId","window","now","history","pushState","setFullYear","yearArr","weekIdx","monthIdx","dayOfWeekIdx","prevDate","buildYearArr","this","monthDate","setMonth","id","week","date1","date2","dayDate","currentEvents","Component","App","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8178e4dd.chunk.js","sourcesContent":["export const colors = [\n    '#eee', '#ccc', '#14A0E7', 'red', 'rebeccapurple',\n    '#A2EEFE', '#649B5E', '#dfd114', '#E59942',\n    '#49B851', '#b47394', '#fcea48', '#004080',\n];\n","import { colors } from './colors';\n\n/**\n * Возвращает индекс дня недели, начиная с понедельника\n * @param date Date - дата, для которой необходимо вернуть индекс\n */\nfunction getDayOfWeekIndex(date: Date) {\n    return (date.getDay() + 6) % 7;\n}\n\n/**\n * Возвращает массив названий дней недели для заданной локали\n * По-умолчанию ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс']\n * @param locale Локаль\n */\nexport function getWeekDays(locale = 'ru-Ru') {\n    const weekDays: string[] = [];\n    const toLocaleDateStringOpts = { weekday: 'short' };\n\n    const dateIterator = new Date();\n\n    for (let i = 0; i < 7; i++) {\n        dateIterator.setDate(dateIterator.getDate() + 1);\n        weekDays[getDayOfWeekIndex(dateIterator)] = dateIterator.toLocaleDateString(locale, toLocaleDateStringOpts);\n    }\n\n    return weekDays;\n};\n\n/**\n * Возвращает итератор по одному дню от startDate до endDate\n * @param startDate Date - дата начала\n * @param endDate Date — конечная дата\n */\nexport function *iterateByDay(startDate: Date, endDate: Date): IterableIterator<Date> {\n    const dateIterator = new Date(startDate);\n\n    while (dateIterator <= endDate) {\n        yield dateIterator;\n        dateIterator.setDate(dateIterator.getDate() + 1);\n    }\n}\n\n/**\n * Для переданной даты возвращает строку вида YYYYMMDD\n * @param date Date — дата\n */\nexport function getDayId(date: Date): string {\n    const month = date.getMonth();\n    const day = date.getDate();\n\n    return [\n        date.getFullYear(),\n        (month < 10 ? '0' : '') + month,\n        (day < 10 ? '0' : '') + day\n    ].join('');\n}\n\n/**\n * Проверяет, что две даты — это один и тот же день\n * @param date1 Date\n * @param date2 Date\n */\nexport function isSameDay(date1: Date, date2: Date): boolean {\n    return getDayId(date1) === getDayId(date2);\n}\n\nexport interface IDay {\n    date: Date;\n    meta?: IDayMeta;\n}\n\ninterface IDayMeta {\n    current?: boolean;\n    otherMonth?: boolean;\n}\n\n/**\n * Генерирует массив из 12 месяцев, содержащих массивы недель, содержащие массивы дней\n * @param year number - год, для которого необходимо сгенерировать массив\n */\nexport function buildYearArr(year?: number) {\n    if (!year) {\n        const now = new Date();\n        year = now.getFullYear();\n    }\n\n    const startDate = new Date(year, 0, 1); // 1st Jan of current year\n    const dateIterator = new Date(startDate);\n    const endDate = new Date(startDate);\n    endDate.setFullYear(startDate.getFullYear() + 1);\n\n    const yearArr : Array<Array<Array<IDay>>> = [];\n    let weekIdx = 0;\n\n    while (dateIterator < endDate) {\n        const monthIdx = dateIterator.getMonth();\n\n        if (!yearArr[monthIdx]) {\n            weekIdx = 0;\n            yearArr[monthIdx] = [];\n        }\n\n        const dayOfWeekIdx = getDayOfWeekIndex(dateIterator);\n\n        if (!yearArr[monthIdx][weekIdx]) {\n            yearArr[monthIdx][weekIdx] = [];\n\n            // when month starts not on monday\n            // keep the days of previous month\n            for (let i = 0; i < dayOfWeekIdx; i++) {\n                const prevDate = new Date(dateIterator);\n                prevDate.setDate(prevDate.getDate() - dayOfWeekIdx + i);\n\n                yearArr[monthIdx][weekIdx].push({\n                    date: prevDate,\n                    meta: {\n                        otherMonth: true\n                    }\n                });\n            }\n        }\n\n        yearArr[monthIdx][weekIdx][dayOfWeekIdx] = {\n            date: new Date(dateIterator)\n        };\n\n        if (getDayOfWeekIndex(dateIterator) === 6) {\n            weekIdx++;\n        }\n\n        dateIterator.setDate(dateIterator.getDate() + 1);\n    }\n\n    return yearArr;\n}\n\nexport interface IEvent {\n    start: Date;\n    end: Date;\n    summary?: string;\n    description?: string;\n    location?: string;\n    url?: string;\n    color: string;\n    type?: string;\n}\n\n// TODO: actualy the structure is never used as is anywhere yet\n// consider to simplify\nconst eventTypes = {\n    CRIMEA_WEEKEND: 'крымский выходной',\n    WEEKEND: 'выходной',\n    BUSINESS_TRIP: 'командировка',\n    VACATION: 'отпуск',\n    CONCERT: 'концерт',\n    SUBBOTNIK: 'субботник',\n    HIKE: 'поход',\n    TRAINING: 'тренинг',\n    FRIDAY: 'пятьница',\n    HACKATHON: 'хакатон',\n    CALIBRATION: 'калибровк',\n    CONFERENCE: 'конференция',\n    UNKNOWN: ''\n};\n\nfunction getEventType(origEvent: any) {\n    const text = (origEvent.summary + origEvent.description).toLowerCase();\n\n    for (const type of Object.values(eventTypes)) {\n        if (text.includes(type)) {\n            return type;\n        }\n    }\n\n    return eventTypes.UNKNOWN;\n}\n\nconst getColor = (function() {\n    const eventTypesVals = Object.values(eventTypes);\n\n    return function(origEvent: any): string {\n        return colors[eventTypesVals.indexOf(getEventType(origEvent))];\n    }\n})();\n\nexport function icalToInternalFormat(icalData: any[]): IEvent[] {\n    return icalData.reduce((acc: IEvent[], origEvent, idx): IEvent[] => {\n        if (origEvent.summary || origEvent.description) {\n            acc.push({\n                start: new Date(origEvent.start),\n                end: new Date(origEvent.end),\n                summary: origEvent.summary,\n                description: origEvent.description,\n                location: origEvent.location,\n                url: origEvent.url && origEvent.url.params.VALUE,\n                // TODO: not optimal\n                color: getColor(origEvent),\n                type: getEventType(origEvent)\n            });\n        }\n\n        return acc;\n    }, [])\n    .sort((a, b) => +a.start - +b.start); // TODO: check if it's really needed\n}\n\nexport type IEventsByDay = Record<string, IEvent[]>;\n\nexport function getEventsByDay(events: IEvent[]) {\n    return events.reduce((acc: IEventsByDay, event, idx) => {\n        const intervalIterator = iterateByDay(event.start, event.end);\n\n        for (let date of intervalIterator) {\n            const dayId = getDayId(date);\n\n            acc[dayId] || (acc[dayId] = []);\n\n            acc[dayId].push(event);\n        }\n\n        return acc;\n    }, {} as IEventsByDay);\n}\n\nfunction humanDateToJs(humanDate: string, defaultYear?: number) {\n    const [day, month, year] = humanDate.split('.');\n\n    return new Date(+year || defaultYear || new Date().getFullYear(), +month - 1, +day);\n}\n\nexport function parseHumanEvents(eventsDescription: string, defaultYear?: number): IEvent[] {\n    const events = eventsDescription.split('\\n').filter(Boolean);\n\n    return events.map(event => {\n        const [interval, ...eventsData] = event.split(/\\s/);\n        const [start, end] = interval.split('-');\n        const [summary, ...descriptionData] = eventsData.join(' ').split('.');\n        const description = descriptionData.join('.').trim();\n        const parsedEvent = {\n            start: humanDateToJs(start, defaultYear),\n            end: humanDateToJs(end || start, defaultYear),\n            summary,\n            description\n        } as IEvent;\n\n        parsedEvent.type = getEventType(parsedEvent);\n        parsedEvent.color = getColor(parsedEvent)\n\n        return parsedEvent;\n    })\n    .sort((a, b) => (+a.start - +b.start) + (+a.end - +b.end))\n}\n","import { cn } from '@bem-react/classname';\n\nexport const cnCalendar = cn('Calendar');\n","import React, { Fragment } from 'react';\nimport { IDay, IEvent } from '../date';\nimport { cnCalendar } from '..';\n\ninterface IDayProps {\n  day: IDay;\n  isCurrent: boolean;\n  events: IEvent[];\n  isWeekend: boolean;\n  isPassed: boolean;\n  className?: string;\n}\n\nfunction getBackground(events: IEvent[]): string {\n  if (events.length === 1) {\n    return events[0].color;\n  }\n  return 'linear-gradient(to bottom, ' +\n    events.reduce((acc: string[], event, idx) => {\n      acc.push(\n        event.color + ' ' + (idx * 100 / events.length) + '%',\n        event.color + ' ' + ((idx + 1) * 100 / events.length) + '%'\n      );\n\n      return acc;\n    }, []).join(', ') +\n    ')';\n}\n\nexport function Day({ day, isCurrent, isWeekend, isPassed, events, className }: IDayProps) {\n  const currentDate = day.date.getDate();\n  const hasEvents = events.length > 0;\n\n  return (\n    <td\n      className={cnCalendar('Day', {\n        current: isCurrent,\n        otherMonth: day.meta && day.meta.otherMonth,\n        weekend: isWeekend,\n        hasEvents: hasEvents,\n        passed: isPassed\n      }, [className])}\n      tabIndex={1}\n    >\n      <div\n        className={cnCalendar('DayText')}\n        style={hasEvents ?\n          { background: getBackground(events) } :\n          undefined\n        }\n      >\n        {currentDate}\n      </div>\n      {\n        hasEvents && (\n          <div className={cnCalendar('DayInfo')}>\n            {events.map((event, idx) => (\n              <Fragment key={idx}>\n                <h3 className={cnCalendar('DayInfoSummary')}>{event.summary}</h3>\n                <div className={cnCalendar('DayInfoDescription')}>\n                  {\n                    [\n                      event.description,\n                      event.location,\n                      event.url\n                    ]\n                      .filter(Boolean)\n                      .map((val, idx) => <p key={idx}>{val}</p>)\n                  }\n                </div>\n              </Fragment>\n            ))}\n          </div>\n        )\n      }\n    </td>\n  );\n}\n","import React from 'react';\n\nimport { cnCalendar } from '..';\nimport { getWeekDays } from '../date';\n\nconst weekDays = getWeekDays();\n\nexport function DaysOfWeek() {\n  return (\n    <tr className={cnCalendar('DaysOfWeek')}>\n      {\n        weekDays.map(dayOfWeek =>\n          <th key={dayOfWeek}>{dayOfWeek}</th>\n        )\n      }\n    </tr>\n  );\n}\n","import React from 'react';\n\nimport { cnCalendar } from '..';\nimport { IEvent } from '../date';\n\ninterface ILegendProps {\n  data: IEvent[];\n}\n\nexport function Legend({ data }: ILegendProps) {\n  const filteredData = data.filter(event => event.summary);\n\n  interface IColorLegend {\n    [key: string]: string;\n  }\n\n  const colorLegend = filteredData.reduce((acc: IColorLegend, event) => {\n    acc[event.color] = event.type || '???';\n\n    return acc;\n  }, {} as IColorLegend);\n\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  let isTodayMarked = false;\n\n  return (\n    <div className={cnCalendar('Legend')}>\n      <ul className={cnCalendar('LegendList')}>\n        {\n          Object.keys(colorLegend).map((color, idx) => (\n            <li\n              className={cnCalendar('LegendItem')}\n              style={{ color }}\n              key={idx}\n            >\n              <span className={cnCalendar('LegendItemText')}>{colorLegend[color]}</span>\n            </li>\n          ))\n        }\n      </ul>\n      <ul className={cnCalendar('LegendList')}>\n        {\n          filteredData.map((event, idx) => {\n            const eventStartStr = event.start.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' });\n            const eventEndStr = event.end.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' });\n            let shouldMarkToday = false;\n\n            if (!isTodayMarked && today < event.start) {\n              isTodayMarked = true;\n              shouldMarkToday = true;\n            }\n\n            return (<li\n              className={cnCalendar('LegendItem', {\n                passed: event.end < today,\n                markToday: shouldMarkToday\n              })}\n              style={{ color: event.color }}\n              key={event.start.toString() + idx}\n            >\n              <span className={cnCalendar('LegendItemText')}>\n                <strong>\n                  {\n                    eventStartStr !== eventEndStr ?\n                      [eventStartStr, eventEndStr].join('-') :\n                      eventStartStr\n                  }\n                </strong>\n                {' '}\n                {event.summary}\n              </span>\n            </li>)\n          })\n        }\n    </ul>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\n\nimport {\n  buildYearArr,\n  getEventsByDay,\n  parseHumanEvents,\n  getDayId,\n  isSameDay,\n  IEvent,\n  IEventsByDay\n} from './date';\n\nimport { cnCalendar } from '.';\nimport './Calendar.css';\n\nimport { Day } from './Day/Day';\nimport { DaysOfWeek } from './DaysOfWeek/DaysOfWeek';\nimport { Legend } from './Legend/Legend';\n\ninterface ICalendarProps {\n  data: string;\n  year?: number;\n}\n\nexport class Calendar extends Component<ICalendarProps> {\n  constructor(props: ICalendarProps) {\n    super(props);\n\n    // TODO: это преобразование должно быть снаружи компонента\n    this.normalizedEvents = parseHumanEvents(this.props.data, this.props.year);\n    this.events = getEventsByDay(this.normalizedEvents);\n  }\n\n  private events: IEventsByDay;\n\n  private normalizedEvents: IEvent[];\n\n  componentDidMount() {\n    if (typeof window !== 'undefined') {\n      const now = new Date();\n      const today = new Date(now);\n      today.setHours(0, 0, 0, 0);\n\n      window.history.pushState(null, '', '#' + today.toLocaleDateString('en-US', { month: 'long' }));\n    }\n  }\n\n  render() {\n    const now = new Date();\n    const year = buildYearArr(this.props.year || now.getFullYear());\n    const today = new Date(now);\n    today.setHours(0, 0, 0, 0);\n\n    return (\n      <div className={cnCalendar()}>\n        <div className={cnCalendar('Year')}>\n          {\n            year.map((month, idx) => {\n              const monthDate = new Date();\n              monthDate.setMonth(idx);\n\n              return (\n                <div className={cnCalendar('Month')} key={idx}>\n                  <h2 className={cnCalendar('MonthName')} id={monthDate.toLocaleDateString('en-US', { month: 'long' })}>\n                    {monthDate.toLocaleDateString('ru-RU', { month: 'long' })}\n                  </h2>\n                  <table className={cnCalendar('MonthTable')}><tbody>\n                    <DaysOfWeek />\n                    {\n                      month.map((week, idx) => (\n                        <tr className={cnCalendar('Week')} key={idx}>\n                          {\n                            week.map((day, idx) => {\n                              const dayDate = day.date;\n                              const dayId = getDayId(dayDate);\n                              const currentEvents = this.events[dayId] || [];\n\n                              return (<Day\n                                day={day}\n                                isCurrent={isSameDay(dayDate, now)}\n                                isWeekend={idx > 4}\n                                events={currentEvents}\n                                isPassed={day.date < today}\n                                key={dayId}\n                              />);\n                            })\n                          }\n                        </tr>\n                      ))\n                    }\n                  </tbody></table>\n                </div>\n              );\n            })\n          }\n        </div>\n        <Legend data={this.normalizedEvents} />\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport { Calendar } from './blocks/Calendar/Calendar';\n\nimport data from './events.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <Calendar data={data} />\n    );\n  }\n}\n\nexport default App;\n","export default `\n09.02-13.02 Командировка Москва\n29.05-30.05 Codefest Новосибирск\n`\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}